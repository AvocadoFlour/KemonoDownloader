// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KemonoDownloaderDataModels.Migrations
{
    [DbContext(typeof(KemonoDbContext))]
    partial class KemonoDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ArtistUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PathOnDisk")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasAlternateKey("ArtistUrl");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Exists")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("KemonoId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PostId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("KemonoId");

                    b.HasIndex("PostId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ArtistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("HtmlContent")
                        .HasColumnType("TEXT");

                    b.Property<int>("KemonoId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Processed")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasAlternateKey("KemonoId");

                    b.HasIndex("ArtistId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Media", b =>
                {
                    b.HasOne("KemonoDownloaderDataModels.Models.Post", "Post")
                        .WithMany("PostMedia")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Post", b =>
                {
                    b.HasOne("KemonoDownloaderDataModels.Models.Artist", "Artist")
                        .WithMany("ArtistPosts")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Artist", b =>
                {
                    b.Navigation("ArtistPosts");
                });

            modelBuilder.Entity("KemonoDownloaderDataModels.Models.Post", b =>
                {
                    b.Navigation("PostMedia");
                });
#pragma warning restore 612, 618
        }
    }
}
